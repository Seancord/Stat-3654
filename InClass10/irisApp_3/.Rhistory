setwd("C:\\Users\\Sean\\Dekstop\\Stat 3654\\")
setwd("C:\\Users\\Sean\\Dekstop\\Stat 3654")
getwd()
setwd("C:\\Users\\Sean\\Dekstop\\Stat 3654")
setwd("C:\\Users\\Sean\\Dekstop\\Stat 3654")
setwd("C:\\Users\\Sean\\Desktop\\Stat 3654")
load("fdata.Rdata")
head(final)
attach(final)
logit = glm(ssc ~ som1 + som2 + som3 + som4 + som5, data = final, family = "binomial")
View(final)
logit = glm(disorder ~ som1 + som2 + som3 + som4 + som5, data = final, family = "binomial")
summary(logit)
logit2 = glm(disorder ~ som6 + som7 + som8 + som9)
logit2 = glm(disorder ~ som6 + som7 + som8 + som9, data = final, family = "binomial")
summary(logit2)
logit3 = glm(disorder ~ som10 + som11 + som12 + som13 + som14, data = final, family = "binomial")
summary(logit3)
summary(logit)
logit$coef
exp(logit$coef)
logit2 = glm(disorder ~ som6 + som7 + som8 + som9, data = final, family = "binomial")
summary(logit2)
logit3 = glm(disorder ~ som10 + som11 + som12 + som13 + som14, data = final, family = "binomial")
summary(logit3)
summary(logit)
logit$coef
exp(logit$coef)
summary(logit2)
summary(logit3)
setwd("c:\\Users\\Sean\\Desktop\\Stat 3654")
load("fdata.Rdata")
final$gp <- runif(dim(final)[1])
View(final)
testSet <- subset(final, final$gp <= 0.1)
trainSet <- subset(final, final$gp > 0.1)
rm(bike)
rm(final)
install.packages("MASS")
library(MASS)
attach(trainSet)
age+gender+location+ethnicity+coder)
fit<- lm(ssc ~ som1+som2+som3+som4+som5+som6+som7+som8+som9+som10+som11+som12+som13+som14
+age+gender+location+ethnicity+coder)
summary(fit)
step <- stepAIC(fit, direction = "both")
step
step$anova
step
step$anova
fitRetained<-lm(ssc ~ som1+som2+som3+som4+som5+som9+som10+som12+som13+som14+
age+location+ethnicity+coder)
summary(fitRetained)
testSet$casualpred <- predict(fit1, newdata = testSet)
testSet$casualpred <- predict(fitRetained, newdata = testSet)
head(testSet)
library(ggplot2)
testSet$sscpred <- predict(fitRetained, newdata = testSet)
head(testSet)
ggplot(data = testSet, aes(x = sscpred, y = ssc)) +
geom_point(color = "red")+
geom_line(aes(x = casual, y = casual), color = "blue")
ggplot(data = testSet, aes(x = sscpred, y = ssc)) +
geom_point(color = "red")+
geom_line(aes(x = ssc, y = ssc), color = "blue")
View(trainSet)
View(testSet)
setwd("C:\\Users\\Sean\\Desktop\\Stat 3654")
data(iris)
data(iris)
head(iris)
names(iris)
summary(iris)
features <- iris[,0:3]
View(features)
features <- iris[,0:4]
View(features)
scaled_features <- scale(features)
summary(scaled_features)
print(distance)
distance <- dist(scaled_features, method = "euclidean")
print(distance)
hier_cl <- hclust(distance, method="ward.D")
plot(hier_cl, labels=protein$Country)
plot(hier_cl, labels=iris$Species)
features <- iris[,0:4]
scaled_features <- scale(features)
summary(scaled_features)
distance <- dist(scaled_features, method = "euclidean")
?hclust
distance <- dist(scaled_features, method = "euclidean")
print(distance)
hier_cl <- hclust(distance, method="ward.D")
plot(hier_cl, labels=iris$Species)
rect.hclust(hier_cl, k=3)
groups <- cutree(hier_cl, k = 3)
print(groups)
kmeans_clusters <- kmeans(distance, 5 , nstart=100, iter.max=100)
kmeans_clusters
clusterDataframe <- [iris$Species hier_cl kmeans_clusters]
clusterDataframe <- [iris$Species, hier_cl, kmeans_clusters]
kmeans_clusters$clusters
kmeans_clusters$cluster
clusterDataframe <- [iris$Species groups kmeans_clusters$cluster]
clusterDataframe <- iris$Species+groups+kmeans_clusters$cluster
clusterDataframe
clusterDataframe <- iris$Species
clusterDataframe <- data.frame(iris$Species, groups, kmeans_clusters$cluster)
View(clusterDataframe)
rename(clusterDataframe, c("groups"="Hierarchical", "kmeans_clusters.cluster"="Kmeans")
View(clusterDataframe)
View(clusterDataframe)
rename(clusterDataframe, c("groups":"Hierarchical", "kmeans_clusters.cluster":"Kmeans")
rename(clusterDataframe, c("groups":"Hierarchical", "kmeans_clusters.cluster":"Kmeans"))
rename(clusterDataframe("groups":"Hierarchical", "kmeans_clusters.cluster":"Kmeans"))
names(clusterDataframe)[names(clusterDataframe)=="groups"]<-"Hierarchical"
View(clusterDataframe)
names(clusterDataframe)[names(clusterDataframe)=="kmeans_clusters.cluster"]<-"Kmeans"
View(clusterDataframe)
kmeans_clusters <- kmeans(distance, 3 , nstart=100, iter.max=100)
kmeans_clusters
kmeans_clusters$cluster
clusterDataframe <- data.frame(iris$Species, groups, kmeans_clusters$cluster)
names(clusterDataframe)[names(clusterDataframe)=="groups"]<-"Hierarchical"
names(clusterDataframe)[names(clusterDataframe)=="kmeans_clusters.cluster"]<-"Kmeans"
View(clusterDataframe)
compare <- cbind(groups,kmeans_clusters$cluster)
compare <- as.data.frame(compare)
names(compare) <- c("Hierarchical", "Kmeans")
compare <- cbind(iris$Species,compare)
compare
View(compare)
data(iris)
head(iris)
setwd("C:\\Users\\Sean\\Desktop\\Stat 3654")
names(iris)
summary(iris)
setwd('C:\\Users\\Sean\\Desktop\\Stat 3654')
protein <- read.table('protein.txt', header=T, sep='\t')
protein <- read.table('protein1.txt', header=T, sep='\t')
View(protein)
names(protein)
head(protein)
summary(protein)
library(shiny)
install('shiny')
install.packages('shiny')
library(shiny)
runApp("App_3")
shinyUI(pageWithSidebar(
headerPanel('Protein k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(protein1)),
selectInput('ycol', 'Y Variable', names(protein1),
selected=names(protein1)[[2]]),
numericInput('clusters', 'Cluster count', 5,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
))
runApp("App_3")
names(protein)
protein1 <- scale(protein[,-1])
protein1 <- as.data.frame(protein1)
names(protein1)
label_points <- protein[,1]
label_points
runApp("App_3")
names(iris)
data(iris)
head(iris)
summary(iris)
names(iris)
iris1 <- scale(iris[,-1])
library('shiny')
iris1 <- scale(iris[,-1])
protein <- read.table('protein1.txt', header=T, sep='\t')
protein1 <- scale(protein[,-1])
protein1 <- as.data.frame(protein1)
View(protein1)
features <- iris[,0:4]
scaled_features <- scale(features)
iris1 <- scaled_features
iris1 <- as.data.frame(iris1)
names(protein1)
label_points <- iris[,1]
names(protein1)
label_points <- protein[,1]
label_points
label_points <- iris[,0:4]
label_points
View(label_points)
View(protein)
label_points <- iris[,5]
label_points
setwd("C:\\Users\\Sean\\Desktop\\Stat 3654")
library('shiny')
runApp('irisApp_3')
runApp('irisApp_3')
runApp('irisApp_3')
